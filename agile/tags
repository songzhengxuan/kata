AddEmployee	PayrollDatabase.cpp	/^void PayrollDatabase::AddEmployee(int empid, Emplo/
AddEmployeeTransaction	AddEmployeeTransaction.cpp	/^AddEmployeeTransaction::AddEmployeeTransaction(int/
AddSalariedEmployee	AddSalaredEmployee.cpp	/^AddSalariedEmployee::~AddSalariedEmployee() {$/
Employee	Employee.cpp	/^Employee::Employee(int empId, string name, string /
Execute	AddEmployeeTransaction.cpp	/^void AddEmployeeTransaction::Execute() {$/
GetAddress	Employee.cpp	/^sting Employee::GetAddress() {$/
GetClassification	AddSalaredEmployee.cpp	/^PaymentClassification* AddSalariedEmployee::GetCla/
GetEmployee	PayrollDatabase.cpp	/^Employee* PayrollDatabase::GetEmployee(int empid) /
GetMethod	Employee.cpp	/^PaymentMethod* Employee::GetMethod() {$/
GetName	Employee.cpp	/^string Employee::GetName() {$/
GetSchedule	AddSalaredEmployee.cpp	/^PaymentSchedule* AddSalariedEmployee::GetSchedule(/
HoldMethod	HoldMethod.cpp	/^HoldMethod::~HoldMethod() {$/
PaymentMethod	PaymentMethod.cpp	/^PaymentMethod::PaymentMethod() {$/
PayrollDatabase	PayrollDatabase.cpp	/^PayrollDatabase::~PayrollDatabase() {$/
SetAddress	Employee.cpp	/^void Employee::SetAddress(string address) {$/
SetClassification	Employee.cpp	/^void Employee::SetClassification(PaymentClassifica/
SetMethod	Employee.cpp	/^void Employee::SetMethod(PaymentMethod *method) {$/
SetName	Employee.cpp	/^void Employee::SetName(string name) {$/
SetSchedule	Employee.cpp	/^void Employee::SetSchedule(PaymentSchedule *schedu/
TEST	PayrollTest.cpp	/^TEST(PayRollTest, TestAddSalariedEmployee) {$/
itsSalary	AddSalaredEmployee.cpp	/^: AddEmployeeTransaction(empid, name, address), it/
